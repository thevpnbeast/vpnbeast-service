---
name: CI
on:
  push:
    branches:
      - master

env:
  GO111MODULE: on

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Lint code
        run: make -s lint
      - name: Clean downloaded binaries
        run: make -s clean

  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Run fmt
        run: make -s fmt
      - name: Clean downloaded binaries
        run: make -s clean

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Test
        run: make -s test

  gosec:
    runs-on: ubuntu-latest
    needs:
      - lint
      - fmt
      - test
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-no-fail -fmt sarif -out results.sarif ./...'
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif

  codeql:
    runs-on: ubuntu-latest
    needs:
      - lint
      - fmt
      - test
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  sonarcloud:
    runs-on: ubuntu-latest
    needs:
      - lint
      - fmt
      - test
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Coverage Test
        run: make -s test-with-coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dproject.settings=build/ci/sonar-project.properties
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs:
      - codeql
      - sonarcloud
      - gosec
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Test
        run: make build

  deploy:
    name: deploy lambda
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Build and compress
        run: make aws-build
      - name: default deploy
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          zip_file: bin/main.zip
          memory_size: 256
          timeout: 10
          handler: main
          runtime: go1.x
          function_name: vpnbeast-api

#  release:
#    needs:
#      - codeql
#      - sonarcloud
#      - build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Set release_version variable
#        run: echo "release_version=$(grep RELEASE_VERSION version.properties | cut -d '=' -f2)" >> $GITHUB_ENV
#      - name: Commit changes to Git repo
#        run: |
#          git config --global user.name vpnbeast-ci
#          git config --global user.email info@thevpnbeast.com
#          git --no-pager diff
#          git add --all
#          git remote add github "https://vpnbeast-ci:${{ secrets.ACTIONS_SECRET }}@github.com/vpnbeast/encryption-service.git"
#          git commit -am "[skip ci] version v${{ env.release_version }} released"
#          git tag -a "v${{ env.release_version }}" -m "v${{ env.release_version }} tagged"
#          git status
#          git push github HEAD:master --force --follow-tags
